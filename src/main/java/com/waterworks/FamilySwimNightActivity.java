package com.waterworks;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.app.Activity;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.os.AsyncTask;import android.os.Bundle;import android.provider.Settings;import android.support.v7.widget.CardView;import android.text.Html;import android.text.method.ScrollingMovementMethod;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.WindowManager.LayoutParams;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.ListPopupWindow;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.ScrollView;import android.widget.TextView;import android.widget.Toast;import com.waterworks.adapter.ListadapterFamilySwimNightAdapter;import com.waterworks.utils.AppConfiguration;import com.waterworks.utils.Utility;import com.wscall.WebServicesCall;@SuppressWarnings("deprecation")public class FamilySwimNightActivity extends Activity {    Button btn_sitelist, btn_date_time, btn_adult, btn_kids;    private static String TAG = "Family Swim Night";    Button ib_back;    RelativeLayout rlEventDates;    Boolean isInternetPresent = false;    //	ListView lv_cr_list;    LinearLayout llListData;    String data_load = "False", data_load_basket = "False", data_load_site = "False",            getdate = "False", getcost = "False", subminfamily = "False";    String siteid, adult, kids;    String token, familyID;    TextView tv_info;    ListPopupWindow lpw_sitelist, lpw_date_time, lpw_adult, lpw_kids;    ArrayList<String> select_month, starting_month, all_siteid, all_sitename, Adult, Kids,            AdultCost, AdultPrice, KidCost, KidPrice, FamSwimCost, FamilySwimid, Warning;    public static ArrayList<String> SwimDate, SwimDateSiteID, SwimDateDesc, Theme;    TextView tv_adult, tv_kids, tv_total, tv_warning, tv_fsn_info1;    //ArrayAdapter<String> adapter;    ListadapterFamilySwimNightAdapter adp;    public static String SelectedVal;    ProgressDialog pd;    ScrollView scrollviewfamily;    String warning;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_family_swim_night_new);//        setContentView(R.layout.activity_family_swim_night);        SharedPreferences prefs = AppConfiguration.getSharedPrefs(getApplicationContext());        token = prefs.getString("Token", "");        familyID = prefs.getString("FamilyID", "");        siteid = prefs.getString("siteid", "");        Log.d(TAG, "Token=" + token + "\nFamilyID=" + familyID);        isInternetPresent = Utility                .isNetworkConnected(FamilySwimNightActivity.this);        if (isInternetPresent) {            Initialization();            siteid = getIntent().getStringExtra("Siteid");            if (AppConfiguration.BasketID.equalsIgnoreCase("0")) {                new GetBasketID().execute();            }            new GetSiteList().execute();        } else {            onDetectNetworkState().show();        }    }    private void Initialization() {        // TODO Auto-generated method stub        EditText tv_fsn_info = (EditText) findViewById(R.id.tv_fsn_info);        tv_fsn_info.setText(Utility.getProgramsInstructionText("2"));        tv_fsn_info.setMovementMethod(new ScrollingMovementMethod());        ib_back = (Button) findViewById(R.id.relMenu);        ib_back.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View paramView) {                // TODO Auto-generated method stub                onBackPressed();            }        });        Button btnHome = (Button) findViewById(R.id.btnHome);        btnHome.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                Intent intentCheckin = new Intent(FamilySwimNightActivity.this, DashBoardActivity.class);                intentCheckin.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);                startActivity(intentCheckin);                finish();            }        });        scrollviewfamily = (ScrollView)findViewById(R.id.scrollviewfamily);        tv_info = (TextView) findViewById(R.id.tv_fsn_info);        lpw_sitelist = new ListPopupWindow(getApplicationContext());        lpw_date_time = new ListPopupWindow(getApplicationContext());        btn_sitelist = (Button) findViewById(R.id.btn_fsn_site);        btn_date_time = (Button) findViewById(R.id.btn_fsn_date_time);        tv_fsn_info1 = (TextView) findViewById(R.id.tv_fsn_info1);        rlEventDates = (RelativeLayout) findViewById(R.id.rlEventDates);        btn_date_time.setText("Please Choose");        btn_sitelist.setText("Please select a Location");        btn_date_time.setEnabled(false);        tv_info.setVerticalScrollBarEnabled(true);        tv_info.setMovementMethod(new ScrollingMovementMethod());        scrollviewfamily.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                tv_info.getParent().requestDisallowInterceptTouchEvent(false);                return false;            }        });        tv_info.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                tv_info.getParent().requestDisallowInterceptTouchEvent(true);                return false;            }        });        btn_date_time.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                // TODO Auto-generated method stub                if (btn_sitelist.getText().toString().trim().equalsIgnoreCase("Please select a Location")) {                    Toast.makeText(FamilySwimNightActivity.this, "Please select site", Toast.LENGTH_LONG).show();                } else {                    lpw_date_time.show();                }            }        });        btn_sitelist.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                // TODO Auto-generated method stub                lpw_sitelist.show();            }        });        tv_warning = (TextView) findViewById(R.id.tv_fsn_warning);        llListData = (LinearLayout) findViewById(R.id.llListData);          }    @Override    public void onBackPressed() {        // TODO Auto-generated method stub        super.onBackPressed();        finish();    }    @Override    protected void onStart() {        // TODO Auto-generated method stub        super.onStart();    }    @Override    protected void onResume() {        // TODO Auto-generated method stub        super.onResume();        this.overridePendingTransition(R.anim.zoom_in, R.anim.zoom_out);        isInternetPresent = Utility                .isNetworkConnected(FamilySwimNightActivity.this);          }    public AlertDialog onDetectNetworkState() {        AlertDialog.Builder builder1 = new AlertDialog.Builder(FamilySwimNightActivity.this);        builder1.setIcon(getResources().getDrawable(R.drawable.logo));        builder1.setMessage("Please turn on internet connection and try again.")                .setTitle("No Internet Connection.")                .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        // TODO Auto-generated method stub                        onBackPressed();                    }                })                .setPositiveButton("OK", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        // TODO Auto-generated method stub                        startActivity(new Intent(Settings.ACTION_WIRELESS_SETTINGS));                    }                });        return builder1.create();    }    public class GetBasketID extends AsyncTask<Void, Void, Void> {        ProgressDialog pd;        @Override        protected void onPreExecute() {            // TODO Auto-generated method stub            super.onPreExecute();            pd = new ProgressDialog(FamilySwimNightActivity.this);            pd.setMessage("Please wait...");            pd.setCancelable(false);            pd.show();        }        @Override        protected Void doInBackground(Void... params) {            // TODO Auto-generated method stub            HashMap<String, String> param = new HashMap<String, String>();            param.put("Token", token);            param.put("siteid", "0");            String responseString = WebServicesCall.RunScript(AppConfiguration.Get_BasketID, param);            GetBasketID(responseString);            return null;        }        @Override        protected void onPostExecute(Void result) {            // TODO Auto-generated method stub            super.onPostExecute(result);            if (pd != null) {                pd.dismiss();            }            if (data_load_basket.toString().equalsIgnoreCase("True")) {                if (AppConfiguration.BasketID.equalsIgnoreCase("0")) {                 } else {                }            } else {              }        }    }    public void GetBasketID(String response) {        try {            JSONObject reader = new JSONObject(response);            data_load_basket = reader.getString("Success");            if (data_load_basket.toString().equals("True")) {                JSONArray jsonMainNode = reader.optJSONArray("BasketDtl");                if (jsonMainNode.toString().equalsIgnoreCase("")) {                } else {                    for (int i = 0; i < jsonMainNode.length(); i++) {                        JSONObject jsonChildNode = jsonMainNode.getJSONObject(i);                        AppConfiguration.BasketID = jsonChildNode.getString("Basketid");                    }                }            }        } catch (JSONException e) {            e.printStackTrace();        } catch (Exception e) {            e.printStackTrace();        }    }    private class GetSiteList extends AsyncTask<Void, Void, Void> {        ProgressDialog pd;        @Override        protected void onPreExecute() {            // TODO Auto-generated method stub            super.onPreExecute();            pd = new ProgressDialog(FamilySwimNightActivity.this);            pd.setMessage("Please wait...");            pd.setCancelable(false);            pd.show();        }        @Override        protected Void doInBackground(Void... params) {            // TODO Auto-generated method stub            HashMap<String, String> param = new HashMap<String, String>();            String responseString = WebServicesCall.RunScript(AppConfiguration.getFamilySwimSiteListURL, param);            try {                JSONObject reader = new JSONObject(responseString);                data_load_site = reader.getString("Success");                if (data_load_site.toString().equals("True")) {                    all_siteid = new ArrayList<String>();                    all_sitename = new ArrayList<String>();                    JSONArray jsonMainNode = reader.optJSONArray("Sites");                    for (int i = 0; i < jsonMainNode.length(); i++) {                        JSONObject jsonChildNode = jsonMainNode.getJSONObject(i);                        all_siteid.add(jsonChildNode.getString("SiteID"));                        all_sitename.add(jsonChildNode.getString("SiteName"));                        AppConfiguration.allsitename = all_sitename;                        String siteId = jsonChildNode.getString("SiteID");                        SharedPreferences prefs = AppConfiguration.getSharedPrefs(FamilySwimNightActivity.this);                        SharedPreferences.Editor editor = prefs.edit();                        editor.putString("siteid", siteId);                        editor.commit();                    }                }            } catch (JSONException e) {                e.printStackTrace();            } catch (Exception e) {                e.printStackTrace();            }            return null;        }        @Override        protected void onPostExecute(Void result) {            // TODO Auto-generated method stub            super.onPostExecute(result);            if (pd != null) {                pd.dismiss();            }            if (data_load_site.toString().equalsIgnoreCase("True")) {                lpw_sitelist.setAdapter(new ArrayAdapter<String>(                        getApplicationContext(),                        R.layout.edittextpopup, all_sitename));                lpw_sitelist.setAnchorView(btn_sitelist);                lpw_sitelist.setHeight(LayoutParams.WRAP_CONTENT);                lpw_sitelist.setModal(true);                lpw_sitelist.setOnItemClickListener(                        new OnItemClickListener() {                            @Override                            public void onItemClick(AdapterView<?> parent, View view,                                                    int pos, long id) {                                // TODO Auto-generated method stub                                btn_sitelist.setText(all_sitename.get(pos));                                siteid = all_siteid.get(pos);                                String textPrice = Utility.getProgramsPricingText("2", siteid);                                if (textPrice.equalsIgnoreCase("")) {                                    tv_fsn_info1.setVisibility(View.GONE);                                } else {                                    tv_fsn_info1.setVisibility(View.VISIBLE);                                    tv_fsn_info1.setText(textPrice);                                }                                btn_date_time.setText("Please Choose");                                new GetDateFromSite().execute();                                lpw_sitelist.dismiss();                            }                        });            } else {                Toast.makeText(FamilySwimNightActivity.this, "Some internaml error,Please try after sometime.", Toast.LENGTH_LONG).show();            }        }    }    //for site name with date    private class GetDateFromSite extends AsyncTask<Void, Void, Void> {        ProgressDialog pd;        @Override        protected void onPreExecute() {            // TODO Auto-generated method stub            super.onPreExecute();            pd = new ProgressDialog(FamilySwimNightActivity.this);            pd.setMessage("Please wait...");            pd.setCancelable(false);            pd.show();        }        @Override        protected Void doInBackground(Void... params) {            // TODO Auto-generated method stub            HashMap<String, String> param = new HashMap<String, String>();            param.put("Token", token);            param.put("FamilyID", familyID);            param.put("SiteID", siteid);            String responseString = WebServicesCall.RunScript(AppConfiguration.fsn_getdate, param);            Log.e("finalString familySwimNight", responseString);            try {                JSONObject reader = new JSONObject(responseString);                getdate = reader.getString("Success");                if (getdate.toString().equals("True")) {                    SwimDate = new ArrayList<String>();                    SwimDateSiteID = new ArrayList<String>();                    SwimDateDesc = new ArrayList<String>();                    Theme = new ArrayList<String>();                    JSONArray jsonMainNode = reader.optJSONArray("FinalArray");                    for (int i = 0; i < jsonMainNode.length(); i++) {                        JSONObject jsonChildNode = jsonMainNode.getJSONObject(i);                        //String swimdate = jsonChildNode.getString("SwimDate");//SwimDate_Front                        String swimdate = jsonChildNode.getString("SwimDate_Front");                        SwimDateSiteID.add(jsonChildNode.getString("SwimDateSiteID"));                        SwimDateDesc.add(jsonChildNode.getString("SwimDate_Desc"));//                        SwimDate.add(jsonChildNode.getString("SwimDate"));                        Theme.add(jsonChildNode.getString("Theme"));                        SwimDate.add(swimdate);                        Log.i("Family swim night", "Position swimdate=" + swimdate.toString());                    }                } else {                    JSONArray jsonMainNode = reader.optJSONArray("FinalArray");                    JSONObject jsonChildNode = jsonMainNode.getJSONObject(0);                    MSG = jsonChildNode.getString("Msg");                }            } catch (JSONException e) {                e.printStackTrace();            } catch (Exception e) {                e.printStackTrace();            }            return null;        }        @Override        protected void onPostExecute(Void result) {            // TODO Auto-generated method stub            super.onPostExecute(result);            if (pd != null) {                pd.dismiss();            }            if (getdate.toString().equalsIgnoreCase("True")) {                rlEventDates.setVisibility(View.VISIBLE);                loadData(SwimDate, SwimDateSiteID, all_siteid, SwimDateDesc, Theme);//				lv_cr_list.setAdapter(adp);                btn_date_time.setEnabled(true);                lpw_date_time.setAdapter(new ArrayAdapter<String>(                        getApplicationContext(),                        R.layout.edittextpopup, SwimDate));                lpw_date_time.setAnchorView(btn_date_time);                lpw_date_time.setHeight(LayoutParams.WRAP_CONTENT);                lpw_date_time.setModal(true);                lpw_date_time.setOnItemClickListener(                        new OnItemClickListener() {                            @Override                            public void onItemClick(AdapterView<?> parent, View view,                                                    int pos, long id) {                                // TODO Auto-generated method stub                                btn_date_time.setText(SwimDate.get(pos));                                swimdate = SwimDateSiteID.get(pos);//                                new GetCost().execute();                                lpw_date_time.dismiss();                                //						btn_submit.setEnabled(true);                            }                        });                //adapter.notifyDataSetChanged();            } else {                rlEventDates.setVisibility(View.GONE);//				adp.notifyDataSetChanged();                Toast.makeText(getApplicationContext(), "Please Choose.", Toast.LENGTH_LONG).show();                btn_date_time.setText("Please Choose");                btn_date_time.setEnabled(false);                Toast.makeText(FamilySwimNightActivity.this, MSG, Toast.LENGTH_LONG).show();            }        }    }    public void loadData(ArrayList<String> days_list, ArrayList<String> days_list_id, ArrayList<String> all_siteid, ArrayList<String> all_sitename, ArrayList<String> theme) {        CardView ck1;        TextView t1, t2;        if (llListData.getChildCount() > 0) {            llListData.removeAllViews();        }        try {            for (int i = 0; i < days_list.size(); i++) {                View convertView = LayoutInflater.from(FamilySwimNightActivity.this).inflate(R.layout.custom_buttonview, null);                ck1 = (CardView) convertView.findViewById(R.id.text);                t1 = (TextView) convertView.findViewById(R.id.textView1);                t2 = (TextView) convertView.findViewById(R.id.textView2);                t1.setText(days_list.get(i));                t2.setText(theme.get(i));                ck1.setTag(String.valueOf(i));                ck1.setOnClickListener(listner);                llListData.addView(convertView);            }        } catch (NullPointerException e) {            e.printStackTrace();        } catch (IndexOutOfBoundsException e) {            e.printStackTrace();        } catch (Exception e) {            e.printStackTrace();        }    }    OnClickListener listner = new OnClickListener() {        @Override        public void onClick(View v) {            int position = Integer.parseInt(v.getTag().toString());            Intent i = new Intent(FamilySwimNightActivity.this, FamilySwimNightActivity_Register.class);            i.putExtra("selectdateid", SwimDateSiteID.get(position));            i.putExtra("selectdate", SwimDate.get(position));            i.putExtra("siteid", SwimDateSiteID.get(position).split("|")[1]);            startActivity(i);        }    };    public String date2Day(String input) {        String goal = "";        try {            SimpleDateFormat inFormat = new SimpleDateFormat("MM/dd/yy");            Date date = inFormat.parse(input);            SimpleDateFormat outFormat = new SimpleDateFormat("EEEE");            goal = outFormat.format(date);        } catch (Exception e) {            // TODO: handle exception        }        return goal;    }    public String date2Month(int number) {        String month = "";        if (number == 1) {            month = "Jan";        } else if (number == 2) {            month = "Feb";        } else if (number == 3) {            month = "Mar";        } else if (number == 4) {            month = "Apr";        } else if (number == 5) {            month = "May";        } else if (number == 6) {            month = "Jun";        } else if (number == 7) {            month = "Jul";        } else if (number == 8) {            month = "Aug";        } else if (number == 9) {            month = "Sep";        } else if (number == 10) {            month = "Oct";        } else if (number == 11) {            month = "Nov";        } else if (number == 12) {            month = "Dec";        }        return month;    }    String swimdate, MSG;    @Override    public void onDestroy() {        super.onDestroy();        if (isFinishing()) {            if (pd != null) {                pd.dismiss();                pd = null;            }        }    }}